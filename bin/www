#!/usr/bin/env node

/**
 * Module dependencies.
 */

var WebSocketServer = require("ws").Server
var app = require('../app');
var debug = require('debug')('poll:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// START SOCKET INSTANCE
var wss = new WebSocketServer({
    server: server
});
console.log("websocket server created");

var usersConnected = -1;
var wsAdmin = {};
var literals = {
    main: 'Valora la demo del programa',
    r0: '"Venta Digital"',
    r1: '"DBI"',
    r2: '"Alta y ContrataciÃ³n"',
    r3: '"MOOM"',
    r4: '"Feedback"',
    r5: '"SDM"',
    r6: '"Digital Payments"',
    r7: '"CARE"',
    r8: '"Mobile Channel"'
};
var pollStatus = {
    type: '',
    href: '',
    qId: ''
};
var ids_counter = 0;
// socket broadcasting
wss.broadcast = function broadcast(data) {
    wss.clients.forEach(function each(client) {
        client.send(data);
    });
};

wss.on("connection", function(ws) {
    // increment id

    var id = setInterval(function() {

        ws.send(JSON.stringify({
            type: 'connected',
            value: usersConnected.toString()
        }))
    }, 1000)
    if (pollStatus.type === 'poll' || pollStatus.type === 'nextQuestion') {
        ws.send(JSON.stringify({
            type: 'nextQuestion',
            href: pollStatus.href,
            qId: pollStatus.qId,
            literal: literals[pollStatus.qId],
            main: literals.main
        }));
    } else if (pollStatus.type === 'standBy') {
        ws.send(JSON.stringify({
            type: 'standBy'
        }));
    }

    ws.send(JSON.stringify({type: 'address', ip: ws.upgradeReq.headers['x-forwarded-for'] || ws.upgradeReq.connection.remoteAddress.split(':')[3]}));
    usersConnected++;
    console.log("websocket connection open via", ws.upgradeReq.connection.remoteAddress.split(':')[3]);

    ws.on('message', function incoming(message) {
        console.log('server received: %s', message);
        var mParsed = JSON.parse(message);

        if (mParsed.type === 'handshake') {
          ws.send(JSON.stringify({type:'handshake',clientId: ++ids_counter}));
        }
        // if a client connects later we will send him the actual state of the poll.
        if (mParsed.type === 'poll') {
            pollStatus.type = mParsed.type;
            pollStatus.href = mParsed.href;
            wsAdmin.send(message);
        } else if (mParsed.type === 'nextQuestion' || mParsed.type === 'standBy') {

            pollStatus.type = mParsed.type;
            pollStatus.href = mParsed.href;
            pollStatus['qId'] = mParsed.qId;

            wss.broadcast(message);
        } else if (mParsed.type === 'reconnect') {
            wss.broadcast(message);
        } else if (mParsed.admin) {

            // capture the admin object
            wsAdmin = ws;
        }
    });

    ws.on("close", function() {
        console.log("websocket connection close");
        --usersConnected;
        clearInterval(id);
    })
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}